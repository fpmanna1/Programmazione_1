Si realizzi in C++ una gerarchia Utente-Gestore. La classe Utente contiene le variabili membro: Login e Password (stringhe C allocate dinamicamente, char *)La classe Gestore aggiunge la variabile membro: Profilo (stringa C allocata dinamicamente, char *)

Si sviluppi la gerarchia fornendo le funzionalità necessarie per la gestione dell’estensione dinamica degli oggetti, si forniscano gli operatori di shift (<< , >>), l’operatore ==  e la funzione booleana Valida, che consente di effettuare un controllo sulla Password e sul Profilo. Il metodo Valida fornito dalla classe base controlla che la lunghezza della Password sia compreso in un intervallo i cui estremi sono due interi forniti in ingresso dall’utente. Il metodo fornito dalla classe derivata effettua lo stesso controllo sulla concatenazione di Password e Profilo.  Si consideri che si vuole effettuare di Valida un uso polimorfo. Il programma utente, mediante una propria funzione valida_elenco, applica il metodo Valida a tutti gli elementi di un vettore da lui/lei fornito in ingresso alla funzione, in modo da effettuare la validazione su una sequenza di utenti. La funzione  valida_elenco lancia una eccezione di tipo NoAuth (classe definita dallo studente) che segnali la fallita validazione di un utente della gerarchia riportando la Login dell’utente per il quale la validazione è fallita.

Homework

Si sviluppi una classe elenco di elementi della gerarchia ricorrendo ad una implementazione mediante lista linkata a puntatori  e si effettui il test del programma inserendo in coda i soli riferimenti agli oggetti che risultano autenticati. La classe elenco fornisce anche operatore <<, costruttore di copia, operatore di assegnazione e distruttore.